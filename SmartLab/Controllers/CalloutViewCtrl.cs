// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using UIKit;
using MonoTouch.Dialog;
using BigTed;

namespace SmartLab
{
	public partial class CalloutViewCtrl : DialogViewController
	{
		EntryElement FirstName, LastName, Email;

		DateElement StartDate, EndDate;
		BooleanElement MultipleDays; 

		DateTimeElement WhenInDate;

		RadioGroup OptionGroup;
		RadioElement Callout, Inlate;

		CheckboxElement[] CentersCheck;
		EntryElement Explaination; 

		StringElement Submit;

		private static string[] Centers = new string[] {
			"SMART Lab (Tutor)", 
			"SMART Lab (TA)",
			"STEM Center",
			"Business Calculus",
			"Stats Center",
			"Chemistry Center",
			"Appointments",
			"Front Desk"
		};

		public CalloutViewCtrl () : base(null)
		{
			this.CentersCheck = new CheckboxElement[Centers.Length];
			for (int i = 0; i < Centers.Length; i++) {
				var tmp = new CheckboxElement (Centers[i]);
				this.CentersCheck [i] = tmp;
			}

			this.FirstName = new EntryElement ("First Name", "Rocky", KeyStore.Get ("FirstName")) {
				TextAlignment = UITextAlignment.Right
			};

			this.LastName = new EntryElement ("Last Name", "D. Bull", KeyStore.Get ("LastName")) {
				TextAlignment = UITextAlignment.Right
			};

			this.Email = new EntryElement ("E-Mail", "rocky@mail.usf.edu", KeyStore.Get ("Email")) {
				TextAlignment = UITextAlignment.Right,
				KeyboardType = UIKeyboardType.EmailAddress
			};

			OptionGroup = new RadioGroup ("type", 0);
			Callout = new RadioElement ("Call-Out", "type");
			Inlate = new RadioElement ("In Late", "type");

			StartDate = new DateElement ("Out On", DateTime.Today) {
				Alignment = UITextAlignment.Right
			};

			MultipleDays = new BooleanElement ("Out Multiple Days", false);
			EndDate = new DateElement ("Back On", DateTime.Today.AddDays (1)) { Alignment = UITextAlignment.Right };

			WhenInDate = new DateTimeElement ("Will Be In", DateTime.Today.AddHours (12)) { Alignment = UITextAlignment.Right };

			Explaination = new EntryElement ("Explaination", "reasons.", null) { TextAlignment = UITextAlignment.Right };

			Section Name = new Section () { FirstName, LastName, Email };
			Section Options = new Section () { Callout, Inlate };

			Section CalloutDates = new Section () { StartDate, MultipleDays };
			MultipleDays.ValueChanged += (sender, e) => {
				if (MultipleDays.Value) {
					CalloutDates.Add(EndDate);
				} else {
					CalloutDates.Remove(EndDate);
				}
			};

			Section LateDay = new Section () { WhenInDate };
			Callout.Tapped += delegate {
				this.Root.RemoveAt(2);
				this.Root.Insert(2, CalloutDates);
			};

			Inlate.Tapped += delegate {
				this.Root.RemoveAt(2);
				this.Root.Insert(2, LateDay);
			};

			this.Submit = new StringElement ("Submit") { Alignment = UITextAlignment.Center };
			this.Root = new RootElement ("Call-Out", OptionGroup) { 
				Name,
				Options,
				CalloutDates,
				new Section("Centers") {
					this.CentersCheck
				},
				new Section() { Explaination },
				new Section() { Submit }
			};


			this.Submit.Tapped += Submit_Tapped;

			this.NavigationItem.LeftBarButtonItem = new UIBarButtonItem (UIBarButtonSystemItem.Cancel, delegate {
				this.NavigationController.PopViewController(true);	
			});
		}

		async void Submit_Tapped ()
		{
			var selected = this.CentersCheck.Any(x=>x.Value);

			if (String.IsNullOrWhiteSpace (this.FirstName.Value) || String.IsNullOrWhiteSpace (this.LastName.Value)) {
				BTProgressHUD.ShowErrorWithStatus ("Name");
			} else if (String.IsNullOrEmpty (this.Email.Value.Trim ().ToLowerInvariant ())) {
				BTProgressHUD.ShowErrorWithStatus ("E-Mail");
			} else if (String.IsNullOrWhiteSpace (this.Explaination.Value)) {
				BTProgressHUD.ShowErrorWithStatus ("Explaination");
			} else if (!selected) {
				BTProgressHUD.ShowErrorWithStatus ("Centers");
			} else {
				/// Call Out? 
				if (this.OptionGroup.Selected == 0) {
					UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
					var cs = CentersCheck.Select (x => x.Value).ToArray ();
					var r = await Api.CallOut(this.FirstName.Value, this.LastName.Value, this.Email.Value.Trim().ToLower(), StartDate.DateValue, MultipleDays.Value, EndDate.DateValue, cs, this.Explaination.Value);
					UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
					if (r) {
						KeyStore.Set ("FirstName", this.FirstName.Value);
						KeyStore.Set ("LastName", this.LastName.Value);
						KeyStore.Set ("Email", this.Email.Value.Trim ().ToLower ());
						BTProgressHUD.ShowSuccessWithStatus ("Sent!");
						this.NavigationController.PopViewController (true);
					} else {
						BTProgressHUD.ShowErrorWithStatus ("Failed");
					}
				} 
				/// Late? 
				else 
				{
					UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
					var cs = CentersCheck.Select (x => x.Value).ToArray ();
					var r = await Api.SendLate (this.FirstName.Value, this.LastName.Value, this.Email.Value.Trim ().ToLower (), this.WhenInDate.DateValue, cs, this.Explaination.Value);
					UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
					if (r) {
						KeyStore.Set ("FirstName", this.FirstName.Value);
						KeyStore.Set ("LastName", this.LastName.Value);
						KeyStore.Set ("Email", this.Email.Value.Trim ().ToLower ());
						BTProgressHUD.ShowSuccessWithStatus ("Sent!");
						this.NavigationController.PopViewController (true);
					} else {
						BTProgressHUD.ShowErrorWithStatus ("Failed");
					}
				}
			}
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
		}
	}
}
