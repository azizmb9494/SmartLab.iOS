// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using Foundation;
using UIKit;
using NotificationCenter;

namespace SmartLab
{
	public partial class RequestsViewCtrl : UITableViewController
	{
		public Response Response; 

		private void UpdateData()
		{
			UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
			this.RefreshControl.BeginRefreshing();
			InvokeInBackground(async () => {
				this.Response = await Api.GetRequests();
				if (KeyStore.BizCalcOnly) {
					this.Response.Requests = this.Response.Requests.Where(
						x=>x.Location.Contains("36") || 
						x.Location.Contains("40") || 
						x.Location.Contains("44") ||
						x.Location.Contains("47") ||
						x.Location.Contains("48")
					).ToList();
				}
					
				if (KeyStore.HideBizCalc) {
					this.Response.Requests = this.Response.Requests.Where(
						x=> x.IsBizCalc() == false
					).ToList();
				}

				InvokeOnMainThread(delegate {
					if (Api.Updated == new DateTime(0)) {
						this.Title = "Update Failed";
						this.TableView.Source = new RequestSource(this.Response);
						this.TableView.ReloadData();
						UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
						this.RefreshControl.EndRefreshing();
					} else {
						this.Title = Api.Updated.ToString("G");
						this.TableView.Source = new RequestSource(this.Response);
						this.TableView.ReloadData();
						UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
						this.RefreshControl.EndRefreshing();
						NCWidgetController.GetWidgetController().SetHasContent(true, "edu.usf.smartlab.today");
					}
				});
			});
		}

		public RequestsViewCtrl (IntPtr handle) : base (handle)
		{
			NSTimer.CreateRepeatingScheduledTimer (5, x => UpdateData ());
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.NavigationItem.RightBarButtonItem.Clicked += (sender, e) => {
				UIActionSheet a = new UIActionSheet("Options");
				nint s = a.AddButton("Schedule"), co = a.AddButton("Call-Out"),c = a.AddButton("Calendar"), b = a.AddButton("Change Filters");
				a.AddButton("Cancel");

				a.Clicked += (sr, ev) => {
					if (ev.ButtonIndex == s) {
						UIApplication.SharedApplication.OpenUrl(new NSUrl(Api.SCHEDULE_URL));
						//this.PerformSegue("Schedule", this);
					} else if (ev.ButtonIndex == c) {
						this.PerformSegue("Calendar", this);
					} else if (ev.ButtonIndex == co) {
						//UIApplication.SharedApplication.OpenUrl(new NSUrl(Api.CALLOUT_URL));
						this.NavigationController.PushViewController(new CalloutViewCtrl(), true);
					} else if (ev.ButtonIndex == b) {
						UIActionSheet aSheet = new UIActionSheet("Options");
						nint all = aSheet.AddButton("Show All"), hide = aSheet.AddButton("Hide Biz Calc"), only = aSheet.AddButton("Biz Calc Only");
						aSheet.Clicked += (sdr, evt) => {
							if (evt.ButtonIndex == all) {
								KeyStore.HideBizCalc = KeyStore.BizCalcOnly = false;
							} else if (evt.ButtonIndex == hide) {
								KeyStore.HideBizCalc = true;
								KeyStore.BizCalcOnly = false;
							} else if (evt.ButtonIndex == only) {
								KeyStore.HideBizCalc = false;
								KeyStore.BizCalcOnly = true;
							}
							this.UpdateData();
						};
						aSheet.ShowInView(this.View);
					}
				};

				a.ShowInView(this.View);
			};

			this.RefreshControl.ValueChanged += (sender, e) => {
				this.UpdateData();
			};

			this.UpdateData ();
		}
	}
}
